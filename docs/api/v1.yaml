openapi: 3.0.0
info:
  version: 1
  title: User Service
  license:
    name: MIT License
    url: https://choosealicense.com/licenses/mit/
  description: |
    Rest service for manage user account, register and login.

    ## URI BASE
    
    The URI is formated by the host and the version.
    
    `{protocol}://{host}/api/v1`

    ## Data Type
    
    The data type used by the API is JSON. 
    
    ### Data field allowed:
     * Integer
     * Double
     * String
     * Array
     * Object
     * Date ISO 8601
    
    ## HATEOAS
    
    Some endpoints migth implement HATEOAS in the body response identified by `*_uri`.

    ## Authorization
    
    The authorization method is based in one time generation token which must be sent in the header by the key `app_key`

    ## HTTP Methods
    
    | Method | CRUD |
    | ------------- | ------------- |
    | HEAD | Head info|
    | GET  | Read |
    | POST  | Create  |
    | PATCH  | Update/Modify  |
    | PUT  | Update/Replace  |
    | DELETE  | Delete |
    
    ## HTTP CODE
    | Code | Description |
    | ------------- | ------------- |
    | 200 | OK |
    | 201  | Created |
    | 400  | Bad Request  |
    | 401  | Unauthorized4  |
    | 403  | Forbidden  |
    | 404  | Not Found |
    | 408  | Timeout |
    | 500  | Server Error |
    | 501  | Not Implemented |
    | 503  | Service Unavailable |

     
servers:
  - url: http://localhost:5000/api/v1
    description: Local for testing
  - url: https://sandbox.users.creations.com/api/v1
    description: Sandox for testing
    

paths:
  /auth/signup:
    post:
      summary: Create a account
      tags:
        - Auth
      parameters:
        - $ref: '#/components/schemas/HeaderAppCode'
        - $ref: '#/components/schemas/HeaderAppId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserForm'
      responses:
        "201":
          description: User created
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/User'



components:
  schemas:
    HeaderAppCode:
      in: header
      name: app-code
      description: Code app on system
      type: string
      required: true
    HeaderAppId:
      in: header
      name: app-id
      type: string
      format: uuid
      required: true
    UserId:
      type: string
      description: Object Id
      required: true
    UserIdObject:
      type: object
      properties:
        user_id:
          $ref: "#/components/schemas/UserId" 
    UserForm:
      type: object
      properties:
        email: 
          type: string
          description: User email
          required: true,
        username:
          type: string
          description: User username
          required: true
        type: 
          type: string
          description: Type of signup
          required: true
        ip:
          type: string
          description: Ip of register
          required: true
        hash:
          type: string
          description: Password encrypted or id_hash from google/facebook 
          required: false
    UserObject:
      type: object
      properties:
        state:
          type: string
          description: State of user
          required: true
    User:
      allOf:
        - $ref: "#/components/schemas/UserIdObject"
        - $ref: "#/components/schemas/UserForm" 
        - $ref: "#/components/schemas/UserObject" 
    Error:
      type: object
      properties:
        code:
          type: string
          description: Error code
        message:
          type: string
          description: Error description
      required:
        - code
        - message  

